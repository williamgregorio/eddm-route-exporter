(()=>{"use strict";const e=document.querySelector("#message");let o=!1;async function t(o){e&&(e.textContent=`Starting to export: ${o}...`);try{const t=await chrome.tabs.query({active:!0,currentWindow:!0});if(!t||0===t.length||!t[0]?.id)throw new Error("Could not identify active tab.");const n=t[0].id;try{const e=await chrome.tabs.sendMessage(n,{action:"PING"});if("PING"!==e?.status)throw console.error("Ping check failed: Invalid response received:",e),new Error("Page script didn't respond correctly. Try reloading the page.")}catch(e){throw console.error("Error occurred during PING:",e),e.message.includes("Receiving end does not exist")?new Error("Cannot connect to the script on the EDDM page. Please reload the page and try again."):new Error(`Connection error: ${pingError.message}`)}e&&(e.textContent=`Requesting ${o} export...`),chrome.tabs.sendMessage(n,{action:"EXPORT_TYPE",exportType:o},(o=>{chrome.runtime.lastError?console.warn("Error sending EXPORT_TYPE command:",chrome.runtime.lastError.message):(console.log("EXPORT_TYPE command sent successfully. Waiting for EXPORT_RESULT.",commandResponse),e&&(e.textContent="Export request sent. Processing data..."))}))}catch(t){console.error(`Error: Processing export ${o} most likely type is wrong:`,t),e&&(e.textContent=`Error: ${t.message}`)}}chrome.runtime.onMessage.addListener(((o,t,n)=>{if("EXPORT_RESULT"===o.action)if("success"===o.status&&o.data)try{!function(e,o){if("string"!=typeof e||!e)return console.error("Download error: Invalid or empty CSV content provided."),void alert("Could not download file: No valid data was generated.");console.log(e),"string"==typeof o&&o||(console.warn("Download warning: No filename provided, using default check reference."),o=`export_${(new Date).toISOString().slice(0,10)}.csv`);let t=null;try{console.log("Download: Creating new blob...");const n=new Blob([e],{type:"text/csv;charset=utf-8;"});console.log(`Download: blob created (size: ${n.size} bytes)`),t=URL.createObjectURL(n),console.log(`Download: Object URL created: ${t}`);const r=document.createElement("a");r.setAttribute("href",t),r.setAttribute("download",o),r.style.visibility="hidden",document.body.appendChild(r),console.log("Download: Triggering click..."),r.click(),console.log("Download: Removing link..."),document.body.removeChild(r),console.log(`popup.js: Downloaded successfully for ${o}`)}catch(e){console.error("Download error during new Blob/Link creation or click:",e),alert(`Failed to prepare or trigger download: ${e.message}`)}finally{t&&(console.log(`Download: Revoking Object URL: ${t}`),URL.revokeObjectURL(t))}}(o.data,filename),e&&(e.textContent=`Successfully exported ${filename}.`)}catch(o){e&&(e.textContent=`Download: failed: ${o.message}`)}else e&&(e.textContent="Export failed: No data extracted or an error occurred on the page. :111");return!1})),document.addEventListener("DOMContentLoaded",(function(){if(o)return;const n=document.getElementById("exportSelectedBtn"),r=document.getElementById("exportAllBtn");if(!n||!r)return console.error("Setup error from listener."),void(e&&(e.textContent="Error: Popup UI elements missing."));n.addEventListener("click",(()=>t("selected"))),r.addEventListener("click",(()=>t("all"))),o=!0}),{once:!0}),e&&(e.textContent="Ready to export EDDM routes.")})();