(()=>{"use strict";function e(){const e=document.getElementById("exportSelectedBtn"),o=document.getElementById("exportAllBtn");async function t(e){console.log(`Popup: handleExportClick called for type: ${e}`);try{const o=await chrome.tabs.query({active:!0,currentWindow:!0});if(!o||0===o.length||!o[0]?.id)return console.error("Popup error: Could not get active tab information."),void alert("Error: Could not identify the active tab. Please ensure you are on the USPS EDDM page and try again.");const t=o[0];console.log(`Popup: Active tab found: ${t.id}`),console.log(`Popup: Injecting content_script.bundle.js into tab ${t.id}`),chrome.scripting.executeScript({target:{tabId:t.id},files:["content_script.bundle.js"]},(o=>chrome.runtime.lastError?(console.error(`Popup: Script injection failed for tab ${t.id}:`,chrome.runtime.lastError),void alert(`Error injecting script: ${chrome.runtime.lastError.message}\n\nPlease reload the EDDM page and the extension.`)):o?(console.log("Popup: Injection seemingly successful. Sending command..."),void chrome.tabs.sendMessage(t.id,{action:"EXPORT_COMMAND",exportType:e},(e=>{chrome.runtime.lastError?console.warn(`Popup: Error sending message to tab ${t.id} (content script might not be listening):`,chrome.runtime.lastError):console.log("Popup: Command message sent successfully.")}))):(console.error("Popup: Injection callback executed, but no results Array received."),void alert("An unexpected issue occurred during script injection (no results []). Please try again."))))}catch(o){console.error(`Popup Error processing export ${e}:`,o),alert(`An unexpected error occurred: ${o.message}`)}}e&&o?(e.addEventListener("click",(()=>t("selected"))),o.addEventListener("click",(()=>t("all")))):console.error("On setup from listener, buttons are missing!.")}chrome.runtime.onMessage.addListener(((e,o,t)=>{if("EXPORT_RESULT"===e.action)if(console.log("Popup: Received export result",e),"success"===e.status&&e.data){const o=`eddm_export_${e.exportType||"data"}_${(new Date).toISOString().slice(0,10)}.csv`;!function(e,o){if("string"!=typeof e||!e)return console.error("Download error: Invalid or empty CSV content provided."),void alert("Could not download file: No valid data was generated.");console.log(e),"string"==typeof o&&o||(console.warn("Download warning: No filename provided, using default check reference."),o=`export_${(new Date).toISOString().slice(0,10)}.csv`);let t=null;try{console.log("Download: Creating new blob...");const n=new Blob([e],{type:"text/csv;charset=utf-8;"});console.log(`Download: blob created (size: ${n.size} bytes)`),t=URL.createObjectURL(n),console.log(`Download: Object URL created: ${t}`);const r=document.createElement("a");r.setAttribute("href",t),r.setAttribute("download",o),r.style.visibility="hidden",document.body.appendChild(r),console.log("Download: Triggering click..."),r.click(),console.log("Download: Removing link..."),document.body.removeChild(r),console.log(`popup.js: Downloaded successfully for ${o}`)}catch(e){console.error("Download error during new Blob/Link creation or click:",e),alert(`Failed to prepare or trigger download: ${e.message}`)}finally{t&&(console.log(`Download: Revoking Object URL: ${t}`),URL.revokeObjectURL(t))}}(e.data,o)}else console.warn("Popup: Export failed or no data returned from content script.");return!1})),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",e):e()})();